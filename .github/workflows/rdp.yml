name: Gmail-RDP

on:
  workflow_dispatch:

concurrency:
  group: trigger-rdp-workflow
  cancel-in-progress: true

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    # Step 1: Check out the repository
    - name: Check out the repository
      uses: actions/checkout@v2

    # Step 2: Install Node.js globally
    - name: Install Node.js globally
      run: |
        Invoke-WebRequest -Uri "https://nodejs.org/dist/v20.18.2/node-v20.18.2-x64.msi" -OutFile "nodejs_installer.msi"
        Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "nodejs_installer.msi", "/quiet", "/norestart" -Wait
        Remove-Item "nodejs_installer.msi"
        node --version
        npm --version

    # Step 3: Clone the repository and install dependencies
    - name: Clone the repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/realtime-chat-app-server.git
        cd realtime-chat-app-server
        npm install
        
        # Create .env file with MongoDB Atlas connection
        @"
        mongodb_uri=mongodb+srv://realtimeChat:realtimeChat@cluster0.sdyx3bs.mongodb.net/realtimeChat?retryWrites=true&w=majority&appName=Cluster0
        jwt_secret=tajbir
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        REDIS_URL=redis://localhost:6379
        "@ | Out-File -FilePath ".env" -Encoding UTF8

    # Step 4: Clone the repository and install dependencies
    - name: Clone Client side repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/realtime-chat-app.git
        cd realtime-chat-app
        npm install
        npm run build
    # Step 4: Start Node.js Server in New PowerShell Window
    #- name: Start Node.js Server in New PowerShell Window
    #  run: |
    #    Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app-server; npm start"
    
    # Step 5: Download and Install Playit
    - name: Download and Install Playit
      run: |
        $playitPath = "$env:USERPROFILE\playit.exe"
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile $playitPath
        Start-Sleep -Seconds 5

   # Step 6: Enable Remote Desktop features and configure user
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # Step 7: Start Playit and Set Up RDP Tunnel
    - name: Start Playit and Set Up RDP Tunnel
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY"

    # Step 8: Start Node.js Server and chat app client in New PowerShell Window
    - name: Start Node.js Server and chat app client in New PowerShell Window
      run: |
        # Install Redis only (skip MongoDB as we're using Atlas)
        choco install redis-64 -y
        Start-Service Redis

        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app; npm run preview"
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app-server; npm start" -NoNewWindow -Wait

    # Step 9: Keep the GitHub Action Runner Alive
    - name: Keep the GitHub Action Runner Alive
      run: |
        while ($true) {
          Write-Output "Session is alive - $(Get-Date)"
          Start-Sleep -Seconds 300
        }

    # Step 10: Trigger New Workflow Run (Auto Restart)
    - name: Trigger New Workflow Run
      if: always()
      env:
        REPO_PAT: ${{ secrets.REPO_PAT }}
      run: |
        $payload = @"
        {
          "ref": "main"
        }
        "@

        Invoke-RestMethod `
          -Method POST `
          -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp.yml/dispatches" `
          -Headers @{
            Authorization = "token $env:REPO_PAT"
            Accept = "application/vnd.github.v3+json"
          } `
          -Body $payload
