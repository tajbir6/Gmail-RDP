name: Gmail-RDP

on:
  workflow_dispatch:

concurrency:
  group: trigger-rdp-workflow
  cancel-in-progress: true

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    # Step 1: Check out the repository
    - name: Check out the repository
      uses: actions/checkout@v2

    # Step 2: Install Node.js globally
    - name: Install Node.js globally
      run: |
        Invoke-WebRequest -Uri "https://nodejs.org/dist/v20.18.2/node-v20.18.2-x64.msi" -OutFile "nodejs_installer.msi"
        Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "nodejs_installer.msi", "/quiet", "/norestart" -Wait
        Remove-Item "nodejs_installer.msi"
        npm install -g nodemon
        node --version
        npm --version

    # Step 3: Clone the repository and install dependencies
    - name: Clone chat app server repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/realtime-chat-app-server.git
        cd realtime-chat-app-server
        npm install
        
        # Create .env file with MongoDB Atlas and Upstash Redis
        @"
        mongodb_uri=${{ secrets.MONGODB_URI }}
        jwt_secret=${{ secrets.JWT_SECRET }}
        REDIS_URL=${{ secrets.REDIS_URI }}
        "@ | Out-File -FilePath ".env" -Encoding UTF8

    # Step 4: Clone mfs server repository and install dependencies
    - name: Clone mfs server repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/mfs-server.git
        cd mfs-server
        npm install

        # Create .env file with MongoDB Atlas and Pin and port
        @"
        mongodb_uri=${{ secrets.MONGODB_URI }}
        jwt_secret=${{ secrets.JWT_SECRET }}
        pin_secret=${{ secrets.PIN_SECRET }}
        PORT=5000
        "@ | Out-File -FilePath ".env" -Encoding UTF8
    # Step 5: Clone the repository and install dependencies
    - name: Clone chat app Client side repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/realtime-chat-app.git
        cd realtime-chat-app
        npm install

        # Fetch the public IP address of the RDP machine using a different service
        $publicIp = Invoke-RestMethod -Uri "http://checkip.amazonaws.com"

        # Trim any whitespace from the IP address
        $publicIp = $publicIp.Trim()


        # Output the public IP for debugging
        Write-Output "Public IP: $publicIp"

        # Create .env file with the public IP address
        @"
        VITE_API=http://transfer-active.gl.at.ply.gg:42988
        VITE_CLOUDINARY_CLOUDNAME=${{ secrets.VITE_CLOUDINARY_CLOUDNAME }}
        VITE_CLOUDINARY_UPLOAD_PRESET=${{ secrets.VITE_CLOUDINARY_UPLOAD_PRESET }}
        "@ | Out-File -FilePath ".env" -Encoding UTF8
        
        npm run build

    # Step 6: Clone mfs client repository and install dependencies
    - name: Clone mfs client repository and install dependencies
      run: |
        git clone https://github.com/Tajbir23/mfs-client.git
        cd mfs-client
        npm install

        # Create .env file with api url
        @"
        VITE_API=http://delivery-referring.gl.at.ply.gg:52346
        "@ | Out-File -FilePath ".env" -Encoding UTF8

        npm run build

    - name: Clone whatsapp auto proxy send repository
      run: |
        echo "Cloning private repository..."
        git clone "https://$env:GITHUB_PAT@github.com/Tajbir23/auto-proxy-send.git"
        cd auto-proxy-send
        npm install
      env:
        GITHUB_PAT: ${{ secrets.WAUPS }}

    # Step 4: Start Node.js Server in New PowerShell Window
    #- name: Start Node.js Server in New PowerShell Window
    #  run: |
    #    Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app-server; npm start"
    
    # Step 5: Download and Install Playit
    - name: Download and Install Playit
      run: |
        $playitPath = "$env:USERPROFILE\playit.exe"
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile $playitPath
        Start-Sleep -Seconds 5

   # Step 6: Enable Remote Desktop features and configure user
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # Step 7: Start Playit and Set Up RDP Tunnel
    - name: Start Playit and Set Up RDP Tunnel
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY"

    # IMPORTANT: Move all the app starts EXCEPT auto-proxy-send to this step
    - name: Start other applications
      run: |
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app; npm run preview" 
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd mfs-client; npm run preview"
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd mfs-server; nodemon index.js"
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", "cd realtime-chat-app-server; npm start"

    # Combine auto-proxy-send with Keep Alive in the same step
    - name: Run auto-proxy-send with logs and periodic git push
      env:
        GITHUB_PAT: ${{ secrets.WAUPS }}
      run: |
        # Set up git config
        cd auto-proxy-send
        $repoPath = "$(Get-Location)"
        git config --global user.email "studenttajbirislam@gmail.com"
        git config --global user.name "Tajbir23"
        
        # Create background push script that runs every 30 minutes
        $pushScript = @"
        cd '$repoPath'
        # Remove tokens folder from .gitignore if it exists
        if (Test-Path ".gitignore") {
          `$gitignore = Get-Content ".gitignore" -Raw
          `$gitignore = `$gitignore -replace "tokens/", ""
          `$gitignore | Set-Content ".gitignore" -NoNewline
        }
        while (`$true) {
          Write-Output "Checking for changes to push - `$(Get-Date)"
          git add .
          # Force add the tokens folder even if it's in parent .gitignore files
          git add -f tokens/
          `$hasChanges = git status --porcelain
          if (`$hasChanges) {
            git commit -m "Automated update from RDP session - `$(Get-Date)"
            git push "https://$($env:GITHUB_PAT)@github.com/Tajbir23/auto-proxy-send.git"
            Write-Output "Changes pushed successfully at `$(Get-Date)"
          } else {
            Write-Output "No changes to push at `$(Get-Date)"
          }
          Start-Sleep -Seconds 1800
        }
        "@
        
        # Start the push script in background
        Start-Process powershell.exe -ArgumentList "-NoExit", "-Command", $pushScript
        
        # Start auto-proxy-send with visible logs AND implement keep-alive in the same window
        $npmPid = $null
        while ($true) {
          # If npm is not running, start it
          if ($npmPid -eq $null -or (Get-Process -Id $npmPid -ErrorAction SilentlyContinue) -eq $null) {
            Write-Output "Starting auto-proxy-send..."
            $npmProcess = Start-Process npm -ArgumentList "run", "dev" -PassThru -NoNewWindow
            $npmPid = $npmProcess.Id
          }
          
          # Keep alive message
          Write-Output "Session is alive - $(Get-Date)"
          Start-Sleep -Seconds 300
        }

    # Step 10: Trigger New Workflow Run (Auto Restart)
    - name: Trigger New Workflow Run
      if: always()
      env:
        REPO_PAT: ${{ secrets.REPO_PAT }}
      run: |
        $payload = @"
        {
          "ref": "main"
        }
        "@

        Invoke-RestMethod `
          -Method POST `
          -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp.yml/dispatches" `
          -Headers @{
            Authorization = "token $env:REPO_PAT"
            Accept = "application/vnd.github.v3+json"
          } `
          -Body $payload
